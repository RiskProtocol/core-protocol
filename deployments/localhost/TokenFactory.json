{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "baseTokenAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "token1Name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "token1Symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "token2Name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "token2Symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "TokenFactory__InsufficientFund",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AssetBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AssetWithdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "buyAsset",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_devTokenIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBaseTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5afe15046e4483ed9509881fe8baa03d42dd7fc541e9b6af35feb00a5dea6551",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "3752097",
    "logsBloom": "0x00000000000000000400000000000000000440000000000000800000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000800000000001000004000000000000000000000000000000020000000000000000000800000000000000000000000004000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xd06f87dde1d8e5168178670a349b5575525694c4df629b3aae7e5e4c34a5861b",
    "transactionHash": "0x5afe15046e4483ed9509881fe8baa03d42dd7fc541e9b6af35feb00a5dea6551",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2,
        "transactionHash": "0x5afe15046e4483ed9509881fe8baa03d42dd7fc541e9b6af35feb00a5dea6551",
        "address": "0xCafac3dD18aC6c6e92c921884f9E4176737C052c",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e7f1725e7734ce288f8367e1bb143e90bb3f0512"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xd06f87dde1d8e5168178670a349b5575525694c4df629b3aae7e5e4c34a5861b"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 2,
        "transactionHash": "0x5afe15046e4483ed9509881fe8baa03d42dd7fc541e9b6af35feb00a5dea6551",
        "address": "0x9f1ac54BEF0DD2f6f3462EA0fa94fC62300d3a8e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e7f1725e7734ce288f8367e1bb143e90bb3f0512"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xd06f87dde1d8e5168178670a349b5575525694c4df629b3aae7e5e4c34a5861b"
      }
    ],
    "blockNumber": 2,
    "cumulativeGasUsed": "3752097",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619",
    "RistP One",
    "R1",
    "RistP Two",
    "R2"
  ],
  "numDeployments": 1,
  "solcInputHash": "a97c228cabf2e75f07063f6dc00a6adf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"baseTokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"token1Name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"token1Symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"token2Name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"token2Symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"TokenFactory__InsufficientFund\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AssetBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AssetWithdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"buyAsset\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_devTokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Okwuosa Chijioke\",\"details\":\"This implements 2 ERC-20 tokens that will be minted in exactly the same proportion as the underlying ERC-20 token transferred into the Factory contract. The asset will be burned in exactly the same proportion when asked to redeem/withdrawal the underlying asset. The contract will implement periodic rebalancing\",\"kind\":\"dev\",\"methods\":{},\"title\":\"ERC-20 Rebase Tokens\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Still under development\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenFactory.sol\":\"TokenFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/DevToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract DevToken is ERC20, Ownable {\\n    constructor(\\n        string memory tokenName,\\n        string memory tokenSymbol\\n    ) ERC20(tokenName, tokenSymbol) {}\\n\\n    function issueToken(address receiver, uint256 amount) public onlyOwner {\\n        _mint(receiver, amount);\\n    }\\n\\n    function tokenBalance(address owner) public view returns (uint256) {\\n        return balanceOf(owner);\\n    }\\n\\n    function burnToken(address account, uint256 amount) public onlyOwner {\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x7400b35fd46d7474281417a2057043dd92c98ed25f2a8475ffeab1d4482e6178\",\"license\":\"GPL-3.0\"},\"contracts/TokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./DevToken.sol\\\";\\n\\nerror TokenFactory__InsufficientFund();\\n\\n/**\\n * @title ERC-20 Rebase Tokens\\n * @author Okwuosa Chijioke\\n * @notice Still under development\\n * @dev This implements 2 ERC-20 tokens that will be minted in exactly the same proportion as the\\n * underlying ERC-20 token transferred into the Factory contract.\\n * The asset will be burned in exactly the same proportion when asked to redeem/withdrawal the underlying asset.\\n * The contract will implement periodic rebalancing\\n */\\ncontract TokenFactory is ReentrancyGuard{\\n    // State variables\\n    DevToken[] private s_devTokenArray;\\n    address private immutable i_baseTokenAddress;\\n    address[] private s_funders;\\n\\n    // Events\\n    event AssetBought(address indexed recipient, uint256 amount);\\n    event AssetWithdrawn(address indexed owner, uint256 amount);\\n\\n    constructor(\\n        address baseTokenAddress,\\n        string memory token1Name,\\n        string memory token1Symbol,\\n        string memory token2Name,\\n        string memory token2Symbol\\n    ) {\\n        i_baseTokenAddress = baseTokenAddress;\\n\\n        DevToken devToken1 = new DevToken(token1Name, token1Symbol);\\n        s_devTokenArray.push(devToken1);\\n\\n        DevToken devToken2 = new DevToken(token2Name, token2Symbol);\\n        s_devTokenArray.push(devToken2);\\n    }\\n\\n    function sendToken(\\n        uint256 _devTokenIndex,\\n        address _receiver,\\n        uint256 _amount\\n    ) private {\\n        s_devTokenArray[_devTokenIndex].issueToken(_receiver, _amount);\\n    }\\n\\n    function getBalance(\\n        uint256 _devTokenIndex,\\n        address _owner\\n    ) public view returns (uint256) {\\n        return s_devTokenArray[_devTokenIndex].tokenBalance(_owner);\\n    }\\n\\n    function burnToken(\\n        uint256 _devTokenIndex,\\n        address _owner,\\n        uint256 _amount\\n    ) private {\\n        s_devTokenArray[_devTokenIndex].burnToken(_owner, _amount);\\n    }\\n\\n    function buyAsset() public payable nonReentrant {\\n        sendToken(0, msg.sender, msg.value);\\n        sendToken(1, msg.sender, msg.value);\\n        s_funders.push(msg.sender);\\n        emit AssetBought(msg.sender, msg.value);\\n    }\\n\\n    function withdrawAsset(uint256 _amount) public nonReentrant{\\n        if (_amount > getBalance(0, msg.sender))\\n            revert TokenFactory__InsufficientFund();\\n        burnToken(0, msg.sender, _amount);\\n        burnToken(1, msg.sender, _amount);\\n        payable(msg.sender).transfer(_amount);\\n        emit AssetWithdrawn(msg.sender, _amount);\\n    }\\n\\n    function getBaseTokenAddress() public view returns (address) {\\n        return i_baseTokenAddress;\\n    }\\n}\\n\",\"keccak256\":\"0xd3ce3fd2a824349eb1a9404daf07d7c97bad348532b4a54fc9436bb77f21dd54\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162002f9338038062002f938339818101604052810190620000379190620003ca565b60016000819055508473ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050600084846040516200008590620001c4565b620000929291906200052b565b604051809103906000f080158015620000af573d6000803e3d6000fd5b5090506001819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600083836040516200012790620001c4565b620001349291906200052b565b604051809103906000f08015801562000151573d6000803e3d6000fd5b5090506001819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050505062000566565b61220a8062000d8983390190565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200021382620001e6565b9050919050565b620002258162000206565b81146200023157600080fd5b50565b60008151905062000245816200021a565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620002a08262000255565b810181811067ffffffffffffffff82111715620002c257620002c162000266565b5b80604052505050565b6000620002d7620001d2565b9050620002e5828262000295565b919050565b600067ffffffffffffffff82111562000308576200030762000266565b5b620003138262000255565b9050602081019050919050565b60005b838110156200034057808201518184015260208101905062000323565b60008484015250505050565b6000620003636200035d84620002ea565b620002cb565b90508281526020810184848401111562000382576200038162000250565b5b6200038f84828562000320565b509392505050565b600082601f830112620003af57620003ae6200024b565b5b8151620003c18482602086016200034c565b91505092915050565b600080600080600060a08688031215620003e957620003e8620001dc565b5b6000620003f98882890162000234565b955050602086015167ffffffffffffffff8111156200041d576200041c620001e1565b5b6200042b8882890162000397565b945050604086015167ffffffffffffffff8111156200044f576200044e620001e1565b5b6200045d8882890162000397565b935050606086015167ffffffffffffffff811115620004815762000480620001e1565b5b6200048f8882890162000397565b925050608086015167ffffffffffffffff811115620004b357620004b2620001e1565b5b620004c18882890162000397565b9150509295509295909350565b600081519050919050565b600082825260208201905092915050565b6000620004f782620004ce565b620005038185620004d9565b93506200051581856020860162000320565b620005208162000255565b840191505092915050565b60006040820190508181036000830152620005478185620004ea565b905081810360208301526200055d8184620004ea565b90509392505050565b60805161080862000581600039600060e301526108086000f3fe60806040526004361061003f5760003560e01c80634df947d0146100445780638d92fdf31461006f5780639fbaf13114610098578063b0a79459146100a2575b600080fd5b34801561005057600080fd5b506100596100df565b60405161006691906105a2565b60405180910390f35b34801561007b57600080fd5b50610096600480360381019061009191906105f8565b610107565b005b6100a061020b565b005b3480156100ae57600080fd5b506100c960048036038101906100c49190610651565b6102e6565b6040516100d691906106a0565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b61010f6103a8565b61011a6000336102e6565b811115610153576040517fd9f6ddd900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61015f600033836103f7565b61016b600133836103f7565b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156101b1573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167f94b055d454fefc95ba06924afbaac83912b1575d621a7d32a4675303246bb7d0826040516101f891906106a0565b60405180910390a26102086104a7565b50565b6102136103a8565b61021f600033346104b1565b61022b600133346104b1565b6002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f1043b9f778084a8d3cd9af8b3e347f91d1f9f75697034f065aac775937fe79d4346040516102d491906106a0565b60405180910390a26102e46104a7565b565b6000600183815481106102fc576102fb6106bb565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663eedc966a836040518263ffffffff1660e01b815260040161035f91906105a2565b602060405180830381865afa15801561037c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a091906106ff565b905092915050565b6002600054036103ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e490610789565b60405180910390fd5b6002600081905550565b6001838154811061040b5761040a6106bb565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d1df306c83836040518363ffffffff1660e01b81526004016104709291906107a9565b600060405180830381600087803b15801561048a57600080fd5b505af115801561049e573d6000803e3d6000fd5b50505050505050565b6001600081905550565b600183815481106104c5576104c46106bb565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e74a84ea83836040518363ffffffff1660e01b815260040161052a9291906107a9565b600060405180830381600087803b15801561054457600080fd5b505af1158015610558573d6000803e3d6000fd5b50505050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061058c82610561565b9050919050565b61059c81610581565b82525050565b60006020820190506105b76000830184610593565b92915050565b600080fd5b6000819050919050565b6105d5816105c2565b81146105e057600080fd5b50565b6000813590506105f2816105cc565b92915050565b60006020828403121561060e5761060d6105bd565b5b600061061c848285016105e3565b91505092915050565b61062e81610581565b811461063957600080fd5b50565b60008135905061064b81610625565b92915050565b60008060408385031215610668576106676105bd565b5b6000610676858286016105e3565b92505060206106878582860161063c565b9150509250929050565b61069a816105c2565b82525050565b60006020820190506106b56000830184610691565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000815190506106f9816105cc565b92915050565b600060208284031215610715576107146105bd565b5b6000610723848285016106ea565b91505092915050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000610773601f8361072c565b915061077e8261073d565b602082019050919050565b600060208201905081810360008301526107a281610766565b9050919050565b60006040820190506107be6000830185610593565b6107cb6020830184610691565b939250505056fea264697066735822122083b477560df69d92933a0ab831b1cea360a32f3c2f8d00d2899fb9635910ebba64736f6c6343000811003360806040523480156200001157600080fd5b506040516200220a3803806200220a8339818101604052810190620000379190620002e8565b818181600390816200004a9190620005b8565b5080600490816200005c9190620005b8565b5050506200007f620000736200008760201b60201c565b6200008f60201b60201c565b50506200069f565b600033905090565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001be8262000173565b810181811067ffffffffffffffff82111715620001e057620001df62000184565b5b80604052505050565b6000620001f562000155565b9050620002038282620001b3565b919050565b600067ffffffffffffffff82111562000226576200022562000184565b5b620002318262000173565b9050602081019050919050565b60005b838110156200025e57808201518184015260208101905062000241565b60008484015250505050565b6000620002816200027b8462000208565b620001e9565b905082815260208101848484011115620002a0576200029f6200016e565b5b620002ad8482856200023e565b509392505050565b600082601f830112620002cd57620002cc62000169565b5b8151620002df8482602086016200026a565b91505092915050565b600080604083850312156200030257620003016200015f565b5b600083015167ffffffffffffffff81111562000323576200032262000164565b5b6200033185828601620002b5565b925050602083015167ffffffffffffffff81111562000355576200035462000164565b5b6200036385828601620002b5565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620003c057607f821691505b602082108103620003d657620003d562000378565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620004407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000401565b6200044c868362000401565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000499620004936200048d8462000464565b6200046e565b62000464565b9050919050565b6000819050919050565b620004b58362000478565b620004cd620004c482620004a0565b8484546200040e565b825550505050565b600090565b620004e4620004d5565b620004f1818484620004aa565b505050565b5b8181101562000519576200050d600082620004da565b600181019050620004f7565b5050565b601f82111562000568576200053281620003dc565b6200053d84620003f1565b810160208510156200054d578190505b620005656200055c85620003f1565b830182620004f6565b50505b505050565b600082821c905092915050565b60006200058d600019846008026200056d565b1980831691505092915050565b6000620005a883836200057a565b9150826002028217905092915050565b620005c3826200036d565b67ffffffffffffffff811115620005df57620005de62000184565b5b620005eb8254620003a7565b620005f88282856200051d565b600060209050601f8311600181146200063057600084156200061b578287015190505b6200062785826200059a565b86555062000697565b601f1984166200064086620003dc565b60005b828110156200066a5784890151825560018201915060208501945060208101905062000643565b868310156200068a578489015162000686601f8916826200057a565b8355505b6001600288020188555050505b505050505050565b611b5b80620006af6000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80638da5cb5b116100a2578063d1df306c11610071578063d1df306c146102d0578063dd62ed3e146102ec578063e74a84ea1461031c578063eedc966a14610338578063f2fde38b146103685761010b565b80638da5cb5b1461023457806395d89b4114610252578063a457c2d714610270578063a9059cbb146102a05761010b565b8063313ce567116100de578063313ce567146101ac57806339509351146101ca57806370a08231146101fa578063715018a61461022a5761010b565b806306fdde0314610110578063095ea7b31461012e57806318160ddd1461015e57806323b872dd1461017c575b600080fd5b610118610384565b6040516101259190611180565b60405180910390f35b6101486004803603810190610143919061123b565b610416565b6040516101559190611296565b60405180910390f35b610166610439565b60405161017391906112c0565b60405180910390f35b610196600480360381019061019191906112db565b610443565b6040516101a39190611296565b60405180910390f35b6101b4610472565b6040516101c1919061134a565b60405180910390f35b6101e460048036038101906101df919061123b565b61047b565b6040516101f19190611296565b60405180910390f35b610214600480360381019061020f9190611365565b6104b2565b60405161022191906112c0565b60405180910390f35b6102326104fa565b005b61023c61050e565b60405161024991906113a1565b60405180910390f35b61025a610538565b6040516102679190611180565b60405180910390f35b61028a6004803603810190610285919061123b565b6105ca565b6040516102979190611296565b60405180910390f35b6102ba60048036038101906102b5919061123b565b610641565b6040516102c79190611296565b60405180910390f35b6102ea60048036038101906102e5919061123b565b610664565b005b610306600480360381019061030191906113bc565b61067a565b60405161031391906112c0565b60405180910390f35b6103366004803603810190610331919061123b565b610701565b005b610352600480360381019061034d9190611365565b610717565b60405161035f91906112c0565b60405180910390f35b610382600480360381019061037d9190611365565b610729565b005b6060600380546103939061142b565b80601f01602080910402602001604051908101604052809291908181526020018280546103bf9061142b565b801561040c5780601f106103e15761010080835404028352916020019161040c565b820191906000526020600020905b8154815290600101906020018083116103ef57829003601f168201915b5050505050905090565b6000806104216107ac565b905061042e8185856107b4565b600191505092915050565b6000600254905090565b60008061044e6107ac565b905061045b85828561097d565b610466858585610a09565b60019150509392505050565b60006012905090565b6000806104866107ac565b90506104a7818585610498858961067a565b6104a2919061148b565b6107b4565b600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610502610c7f565b61050c6000610cfd565b565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600480546105479061142b565b80601f01602080910402602001604051908101604052809291908181526020018280546105739061142b565b80156105c05780601f10610595576101008083540402835291602001916105c0565b820191906000526020600020905b8154815290600101906020018083116105a357829003601f168201915b5050505050905090565b6000806105d56107ac565b905060006105e3828661067a565b905083811015610628576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061f90611531565b60405180910390fd5b61063582868684036107b4565b60019250505092915050565b60008061064c6107ac565b9050610659818585610a09565b600191505092915050565b61066c610c7f565b6106768282610dc3565b5050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b610709610c7f565b6107138282610f90565b5050565b6000610722826104b2565b9050919050565b610731610c7f565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036107a0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610797906115c3565b60405180910390fd5b6107a981610cfd565b50565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610823576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081a90611655565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610892576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610889906116e7565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161097091906112c0565b60405180910390a3505050565b6000610989848461067a565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610a0357818110156109f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ec90611753565b60405180910390fd5b610a0284848484036107b4565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610a78576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6f906117e5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610ae7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ade90611877565b60405180910390fd5b610af28383836110e6565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610b78576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6f90611909565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610c6691906112c0565b60405180910390a3610c798484846110eb565b50505050565b610c876107ac565b73ffffffffffffffffffffffffffffffffffffffff16610ca561050e565b73ffffffffffffffffffffffffffffffffffffffff1614610cfb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf290611975565b60405180910390fd5b565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610e32576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2990611a07565b60405180910390fd5b610e3e826000836110e6565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610ec4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ebb90611a99565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610f7791906112c0565b60405180910390a3610f8b836000846110eb565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610fff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff690611b05565b60405180910390fd5b61100b600083836110e6565b806002600082825461101d919061148b565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516110ce91906112c0565b60405180910390a36110e2600083836110eb565b5050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561112a57808201518184015260208101905061110f565b60008484015250505050565b6000601f19601f8301169050919050565b6000611152826110f0565b61115c81856110fb565b935061116c81856020860161110c565b61117581611136565b840191505092915050565b6000602082019050818103600083015261119a8184611147565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006111d2826111a7565b9050919050565b6111e2816111c7565b81146111ed57600080fd5b50565b6000813590506111ff816111d9565b92915050565b6000819050919050565b61121881611205565b811461122357600080fd5b50565b6000813590506112358161120f565b92915050565b60008060408385031215611252576112516111a2565b5b6000611260858286016111f0565b925050602061127185828601611226565b9150509250929050565b60008115159050919050565b6112908161127b565b82525050565b60006020820190506112ab6000830184611287565b92915050565b6112ba81611205565b82525050565b60006020820190506112d560008301846112b1565b92915050565b6000806000606084860312156112f4576112f36111a2565b5b6000611302868287016111f0565b9350506020611313868287016111f0565b925050604061132486828701611226565b9150509250925092565b600060ff82169050919050565b6113448161132e565b82525050565b600060208201905061135f600083018461133b565b92915050565b60006020828403121561137b5761137a6111a2565b5b6000611389848285016111f0565b91505092915050565b61139b816111c7565b82525050565b60006020820190506113b66000830184611392565b92915050565b600080604083850312156113d3576113d26111a2565b5b60006113e1858286016111f0565b92505060206113f2858286016111f0565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061144357607f821691505b602082108103611456576114556113fc565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061149682611205565b91506114a183611205565b92508282019050808211156114b9576114b861145c565b5b92915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b600061151b6025836110fb565b9150611526826114bf565b604082019050919050565b6000602082019050818103600083015261154a8161150e565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006115ad6026836110fb565b91506115b882611551565b604082019050919050565b600060208201905081810360008301526115dc816115a0565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061163f6024836110fb565b915061164a826115e3565b604082019050919050565b6000602082019050818103600083015261166e81611632565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b60006116d16022836110fb565b91506116dc82611675565b604082019050919050565b60006020820190508181036000830152611700816116c4565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b600061173d601d836110fb565b915061174882611707565b602082019050919050565b6000602082019050818103600083015261176c81611730565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006117cf6025836110fb565b91506117da82611773565b604082019050919050565b600060208201905081810360008301526117fe816117c2565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006118616023836110fb565b915061186c82611805565b604082019050919050565b6000602082019050818103600083015261189081611854565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006118f36026836110fb565b91506118fe82611897565b604082019050919050565b60006020820190508181036000830152611922816118e6565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061195f6020836110fb565b915061196a82611929565b602082019050919050565b6000602082019050818103600083015261198e81611952565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006119f16021836110fb565b91506119fc82611995565b604082019050919050565b60006020820190508181036000830152611a20816119e4565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000611a836022836110fb565b9150611a8e82611a27565b604082019050919050565b60006020820190508181036000830152611ab281611a76565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000611aef601f836110fb565b9150611afa82611ab9565b602082019050919050565b60006020820190508181036000830152611b1e81611ae2565b905091905056fea2646970667358221220c9f34f3cab58a40cead75f018445ad721f669c1b24a7fea6e14a3fbdb8b56e4264736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061003f5760003560e01c80634df947d0146100445780638d92fdf31461006f5780639fbaf13114610098578063b0a79459146100a2575b600080fd5b34801561005057600080fd5b506100596100df565b60405161006691906105a2565b60405180910390f35b34801561007b57600080fd5b50610096600480360381019061009191906105f8565b610107565b005b6100a061020b565b005b3480156100ae57600080fd5b506100c960048036038101906100c49190610651565b6102e6565b6040516100d691906106a0565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b61010f6103a8565b61011a6000336102e6565b811115610153576040517fd9f6ddd900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61015f600033836103f7565b61016b600133836103f7565b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156101b1573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167f94b055d454fefc95ba06924afbaac83912b1575d621a7d32a4675303246bb7d0826040516101f891906106a0565b60405180910390a26102086104a7565b50565b6102136103a8565b61021f600033346104b1565b61022b600133346104b1565b6002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f1043b9f778084a8d3cd9af8b3e347f91d1f9f75697034f065aac775937fe79d4346040516102d491906106a0565b60405180910390a26102e46104a7565b565b6000600183815481106102fc576102fb6106bb565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663eedc966a836040518263ffffffff1660e01b815260040161035f91906105a2565b602060405180830381865afa15801561037c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a091906106ff565b905092915050565b6002600054036103ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e490610789565b60405180910390fd5b6002600081905550565b6001838154811061040b5761040a6106bb565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d1df306c83836040518363ffffffff1660e01b81526004016104709291906107a9565b600060405180830381600087803b15801561048a57600080fd5b505af115801561049e573d6000803e3d6000fd5b50505050505050565b6001600081905550565b600183815481106104c5576104c46106bb565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e74a84ea83836040518363ffffffff1660e01b815260040161052a9291906107a9565b600060405180830381600087803b15801561054457600080fd5b505af1158015610558573d6000803e3d6000fd5b50505050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061058c82610561565b9050919050565b61059c81610581565b82525050565b60006020820190506105b76000830184610593565b92915050565b600080fd5b6000819050919050565b6105d5816105c2565b81146105e057600080fd5b50565b6000813590506105f2816105cc565b92915050565b60006020828403121561060e5761060d6105bd565b5b600061061c848285016105e3565b91505092915050565b61062e81610581565b811461063957600080fd5b50565b60008135905061064b81610625565b92915050565b60008060408385031215610668576106676105bd565b5b6000610676858286016105e3565b92505060206106878582860161063c565b9150509250929050565b61069a816105c2565b82525050565b60006020820190506106b56000830184610691565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000815190506106f9816105cc565b92915050565b600060208284031215610715576107146105bd565b5b6000610723848285016106ea565b91505092915050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000610773601f8361072c565b915061077e8261073d565b602082019050919050565b600060208201905081810360008301526107a281610766565b9050919050565b60006040820190506107be6000830185610593565b6107cb6020830184610691565b939250505056fea264697066735822122083b477560df69d92933a0ab831b1cea360a32f3c2f8d00d2899fb9635910ebba64736f6c63430008110033",
  "devdoc": {
    "author": "Okwuosa Chijioke",
    "details": "This implements 2 ERC-20 tokens that will be minted in exactly the same proportion as the underlying ERC-20 token transferred into the Factory contract. The asset will be burned in exactly the same proportion when asked to redeem/withdrawal the underlying asset. The contract will implement periodic rebalancing",
    "kind": "dev",
    "methods": {},
    "title": "ERC-20 Rebase Tokens",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Still under development",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 123,
        "contract": "contracts/TokenFactory.sol:TokenFactory",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 954,
        "contract": "contracts/TokenFactory.sol:TokenFactory",
        "label": "s_devTokenArray",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_contract(DevToken)941)dyn_storage"
      },
      {
        "astId": 959,
        "contract": "contracts/TokenFactory.sol:TokenFactory",
        "label": "s_funders",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_contract(DevToken)941)dyn_storage": {
        "base": "t_contract(DevToken)941",
        "encoding": "dynamic_array",
        "label": "contract DevToken[]",
        "numberOfBytes": "32"
      },
      "t_contract(DevToken)941": {
        "encoding": "inplace",
        "label": "contract DevToken",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}